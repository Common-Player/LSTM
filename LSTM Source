
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler
dataset_train = pd.read_csv('D://./data/Mean_result20201102-20210416.csv') #修改点1：数据读入
training_set = dataset_train.iloc[:, 1:2].values
sc = MinMaxScaler(feature_range=(0, 1))
training_set_scaled = sc.fit_transform(training_set)
X_train = []
y_train = []
for i in range(60, 172800 ): #修改点2：步长设置
    X_train.append(training_set_scaled[i - 60:i, 0])#修改点3：步长设置    
    y_train.append(training_set_scaled[i, 0])
X_train, y_train = np.array(X_train), np.array(y_train)
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))
regressor = tf.keras.Sequential()
regressor.add(tf.keras.layers.LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
regressor.add(tf.keras.layers.Dropout(0.2))
regressor.add(tf.keras.layers.LSTM(units=50, return_sequences=True))
regressor.add(tf.keras.layers.Dropout(0.2))
regressor.add(tf.keras.layers.LSTM(units=50, return_sequences=True))
regressor.add(tf.keras.layers.Dropout(0.2))
regressor.add(tf.keras.layers.LSTM(units=50))
regressor.add(tf.keras.layers.Dropout(0.2))
regressor.add(tf.keras.layers.Dense(units=1))
tf.keras.layers.Dense(10, activation=tf.nn.softmax)#神经元数目修改 10
regressor.compile(optimizer='adam', loss='mean_squared_error')
regressor.fit(X_train, y_train, epochs=1, batch_size=32)#额外修改点，训练次数，batch_size是2的指数次幂（32、64、128，防止过拟合和欠拟合）
dataset_test = pd.read_csv('D://./data/Mean_result20210419-20210430.csv')#修改点4：测试数据集（预测）
real_stock_price = dataset_test.iloc[:, 1:2].values
dataset_total = dataset_test['price']#v1.1
inputs = dataset_total[:60].values#v1.2
inputs = inputs.reshape(-1, 1)
inputs = sc.transform(inputs)
X_test = []
temp = []
predicted_stock_price = []
for i in range(60, 2880):
    X_test.append(inputs[i - 60:i, 0]) #修改点7：
    X_test = np.array(X_test)
    X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
    predicted_stock_price_temp = regressor.predict(X_test)
    temp = inputs
    temp = temp.tolist()
    temp.append(predicted_stock_price_temp)         
    inputs = np.asarray(temp,'float64')
    X_test = []
    temp = []
    predicted_stock_price.extend(predicted_stock_price_temp)
predicted_stock_price = np.array(predicted_stock_price)
np.array(inputs)
predicted_stock_price = sc.inverse_transform(predicted_stock_price)
temp1 = 0
temp2 = np.array(real_stock_price[:60])
predicted_stock_price = np.array(predicted_stock_price)
predicted_stock_price = np.concatenate([temp2,predicted_stock_price])
for i in range(0, 2880):
    temp1 = abs(real_stock_price [i] -predicted_stock_price [i]) + temp1
temp1 = temp1/2880
s = '平均误差值(MAD)：'
print (s)
print (temp1)
temp2 = 0
for i in range(0, 2880):
   temp2 = (real_stock_price [i] -predicted_stock_price [i])**2 + temp2
temp2 = temp2/2880
s2 = '均方误差值(MSE)：'
print (s2)
print (temp2)
temp3 = 0
for i in range(0, 2880):
   temp3 = (real_stock_price [i] -predicted_stock_price [i]) + temp3
temp3 = temp3/2880
s3 = '平均预测误差(MFE)：'
print (s3)
print (temp3)
temp4 = 0
for i in range(0, 2880):
   temp4 = (abs(real_stock_price [i] -predicted_stock_price [i])/real_stock_price [i]) + temp4
temp4 = 100*temp4/2880
s4 = '平均绝对百分误差(MAPE)：'
print (s4)
print (temp4)
plt.plot(real_stock_price, color='red', label='Real Price')
plt.plot(predicted_stock_price, color='blue', label='Predicted Price')
plt.title('Time and sales dataset_price')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.show()
